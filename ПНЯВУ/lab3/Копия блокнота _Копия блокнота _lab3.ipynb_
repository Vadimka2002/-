{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1o_6j409TaMGb3DPyR7w614N_aN0HvAPo","timestamp":1697559101477},{"file_id":"1UzrXJ_DHuT8f4HCK9jqEoJtxcbxomUsk","timestamp":1697551996142}],"authorship_tag":"ABX9TyMFGY0fYOlbi1jUtYKs8awg"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"abw5OpUWfARP","executionInfo":{"status":"ok","timestamp":1697559134572,"user_tz":-180,"elapsed":7285,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}}},"outputs":[],"source":["import torch\n","import random\n","import numpy as np\n","\n","random.seed(0)\n","np.random.seed(0)\n","torch.manual_seed(0)\n","torch.cuda.manual_seed(0)\n","torch.backends.cudnn.deterministic = True"]},{"cell_type":"code","source":["import torchvision.datasets\n","MNIST_train = torchvision.datasets.MNIST('./', download=True, train=True)\n","MNIST_test = torchvision.datasets.MNIST('./', download=True, train=True)\n","\n","X_train = MNIST_train.train_data\n","y_train = MNIST_train.train_labels\n","X_test= MNIST_test.test_data\n","y_test = MNIST_test.test_labels"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QuMOUr9EggPr","executionInfo":{"status":"ok","timestamp":1697559136846,"user_tz":-180,"elapsed":2280,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}},"outputId":"3ad8b446-6f3b-4316-a782-cb0b7841ba37"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to ./MNIST/raw/train-images-idx3-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9912422/9912422 [00:00<00:00, 83363164.93it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting ./MNIST/raw/train-images-idx3-ubyte.gz to ./MNIST/raw\n","\n","Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to ./MNIST/raw/train-labels-idx1-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 28881/28881 [00:00<00:00, 76960415.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Extracting ./MNIST/raw/train-labels-idx1-ubyte.gz to ./MNIST/raw\n","\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to ./MNIST/raw/t10k-images-idx3-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["\n","100%|██████████| 1648877/1648877 [00:00<00:00, 25818763.31it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting ./MNIST/raw/t10k-images-idx3-ubyte.gz to ./MNIST/raw\n","\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to ./MNIST/raw/t10k-labels-idx1-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 4542/4542 [00:00<00:00, 13804730.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Extracting ./MNIST/raw/t10k-labels-idx1-ubyte.gz to ./MNIST/raw\n","\n"]},{"output_type":"stream","name":"stderr","text":["\n","/usr/local/lib/python3.10/dist-packages/torchvision/datasets/mnist.py:75: UserWarning: train_data has been renamed data\n","  warnings.warn(\"train_data has been renamed data\")\n","/usr/local/lib/python3.10/dist-packages/torchvision/datasets/mnist.py:65: UserWarning: train_labels has been renamed targets\n","  warnings.warn(\"train_labels has been renamed targets\")\n","/usr/local/lib/python3.10/dist-packages/torchvision/datasets/mnist.py:80: UserWarning: test_data has been renamed data\n","  warnings.warn(\"test_data has been renamed data\")\n","/usr/local/lib/python3.10/dist-packages/torchvision/datasets/mnist.py:70: UserWarning: test_labels has been renamed targets\n","  warnings.warn(\"test_labels has been renamed targets\")\n"]}]},{"cell_type":"code","source":["X_train.dtype, y_train.dtype"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7UOAamg7hYAS","executionInfo":{"status":"ok","timestamp":1697559136847,"user_tz":-180,"elapsed":22,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}},"outputId":"01f13c73-b773-462b-e084-97fe07f78b58"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(torch.uint8, torch.int64)"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["X_train = X_train.float()\n","X_test = X_test.float()"],"metadata":{"id":"lyX5IYzJholT","executionInfo":{"status":"ok","timestamp":1697559137244,"user_tz":-180,"elapsed":410,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["X_train.shape, X_test.shape\n","y_train.shape, y_test.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vesjRklgiA6y","executionInfo":{"status":"ok","timestamp":1697559137244,"user_tz":-180,"elapsed":8,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}},"outputId":"2d64d54f-694b-431b-9d2f-58f4aa849147"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(torch.Size([60000]), torch.Size([60000]))"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","plt.imshow(X_train[0, :, :])\n","plt.show()\n","print(y_train[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"_EHEIFcIiRWK","executionInfo":{"status":"ok","timestamp":1697559138087,"user_tz":-180,"elapsed":849,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}},"outputId":"da817b87-6a0e-420d-c0ef-fde68a2a4ceb"},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["tensor(5)\n"]}]},{"cell_type":"code","source":["X_train = X_train.reshape([-1, 28 * 28])\n","X_test = X_test.reshape([-1, 28 * 28])"],"metadata":{"id":"TEEfsnqWiotX","executionInfo":{"status":"ok","timestamp":1697559138088,"user_tz":-180,"elapsed":23,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["class MNISTNet(torch.nn.Module):\n","  def __init__(self, n_hidden_neurons):\n","    super(MNISTNet, self).__init__()\n","    self.fc1 = torch.nn.Linear(28 * 28, n_hidden_neurons)\n","    self.ac1 = torch.nn.Sigmoid()\n","    self.fc2 = torch.nn.Linear(n_hidden_neurons, 10)\n","  def forward(self, x):\n","    x = self.fc1(x)\n","    x = self.ac1(x)\n","    x = self.fc2(x)\n","    return x\n","mnist_net = MNISTNet(60)"],"metadata":{"id":"ZBvvwsIxi7Wu","executionInfo":{"status":"ok","timestamp":1697559138089,"user_tz":-180,"elapsed":23,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["loss = torch.nn.CrossEntropyLoss()\n","optimizer = torch.optim.Adam(mnist_net.parameters(), lr=1.0e-6)"],"metadata":{"id":"OfkVCb6LkVZP","executionInfo":{"status":"ok","timestamp":1697559138090,"user_tz":-180,"elapsed":22,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["batch_size = 60\n","test_accuracy_history = []\n","test_loss_history = []\n","\n","#X_test = X_test.to(device)\n","#y_test = y_test.to(device)\n","for epoch in range(100):\n","  order = np.random.permutation(len(X_train))\n","\n","  for start_index in range(0, len(X_train), batch_size):\n","    optimizer.zero_grad()\n","\n","    batch_indexes = order[start_index:start_index+batch_size]\n","\n","    X_batch = X_train[batch_indexes]#.to(device)\n","    y_batch = y_train[batch_indexes]#.to(device)\n","\n","    preds = mnist_net.forward(X_batch)\n","\n","    loss_value = loss(preds, y_batch)\n","    loss_value.backward()\n","\n","    optimizer.step()\n","\n","  test_preds = mnist_net.forward(X_test)\n","  test_loss_history.append(loss(test_preds, y_test))\n","\n","  accuracy = (test_preds.argmax(dim=1) == y_test).float().mean()\n","  test_accuracy_history.append(accuracy)\n","\n","  print(accuracy)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uvljkgb9ksC-","executionInfo":{"status":"ok","timestamp":1697561882400,"user_tz":-180,"elapsed":227834,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}},"outputId":"5bf52147-a16b-4021-8425-eb4a1072d98a"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor(0.1512)\n","tensor(0.2007)\n","tensor(0.2503)\n","tensor(0.2967)\n","tensor(0.3415)\n","tensor(0.3838)\n","tensor(0.4252)\n","tensor(0.4638)\n","tensor(0.4980)\n","tensor(0.5275)\n","tensor(0.5544)\n","tensor(0.5785)\n","tensor(0.5994)\n","tensor(0.6178)\n","tensor(0.6335)\n","tensor(0.6486)\n","tensor(0.6621)\n","tensor(0.6737)\n","tensor(0.6853)\n","tensor(0.6962)\n","tensor(0.7060)\n","tensor(0.7149)\n","tensor(0.7234)\n","tensor(0.7308)\n","tensor(0.7380)\n","tensor(0.7455)\n","tensor(0.7518)\n","tensor(0.7580)\n","tensor(0.7620)\n","tensor(0.7669)\n","tensor(0.7715)\n","tensor(0.7764)\n","tensor(0.7807)\n","tensor(0.7853)\n","tensor(0.7896)\n","tensor(0.7929)\n","tensor(0.7969)\n","tensor(0.8007)\n","tensor(0.8038)\n","tensor(0.8071)\n","tensor(0.8094)\n","tensor(0.8120)\n","tensor(0.8146)\n","tensor(0.8174)\n","tensor(0.8198)\n","tensor(0.8223)\n","tensor(0.8241)\n","tensor(0.8261)\n","tensor(0.8282)\n","tensor(0.8299)\n","tensor(0.8313)\n","tensor(0.8328)\n","tensor(0.8347)\n","tensor(0.8366)\n","tensor(0.8376)\n","tensor(0.8392)\n","tensor(0.8409)\n","tensor(0.8423)\n","tensor(0.8432)\n","tensor(0.8445)\n","tensor(0.8454)\n","tensor(0.8467)\n","tensor(0.8479)\n","tensor(0.8490)\n","tensor(0.8503)\n","tensor(0.8518)\n","tensor(0.8529)\n","tensor(0.8537)\n","tensor(0.8546)\n","tensor(0.8560)\n","tensor(0.8570)\n","tensor(0.8575)\n","tensor(0.8583)\n","tensor(0.8594)\n","tensor(0.8605)\n","tensor(0.8615)\n","tensor(0.8626)\n","tensor(0.8633)\n","tensor(0.8641)\n","tensor(0.8651)\n","tensor(0.8659)\n","tensor(0.8666)\n","tensor(0.8675)\n","tensor(0.8685)\n","tensor(0.8693)\n","tensor(0.8699)\n","tensor(0.8709)\n","tensor(0.8713)\n","tensor(0.8721)\n","tensor(0.8731)\n","tensor(0.8739)\n","tensor(0.8745)\n","tensor(0.8752)\n","tensor(0.8755)\n","tensor(0.8760)\n","tensor(0.8767)\n","tensor(0.8772)\n","tensor(0.8777)\n","tensor(0.8785)\n","tensor(0.8789)\n"]}]},{"cell_type":"code","source":["plt.plot(test_accuracy_history)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"5siEc3xLoUK0","executionInfo":{"status":"ok","timestamp":1697562374604,"user_tz":-180,"elapsed":975,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}},"outputId":"cb7cda9b-3baf-4d8a-eee3-2fd56f3bd6e9"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7bd30aa32230>]"]},"metadata":{},"execution_count":14},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.plot(test_loss_history)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":739},"id":"i_4LsAL8okHV","executionInfo":{"status":"error","timestamp":1697562377524,"user_tz":-180,"elapsed":561,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}},"outputId":"98b507ca-b90e-4d39-c88c-2f98ff33c178"},"execution_count":15,"outputs":[{"output_type":"error","ename":"RuntimeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-cfcccf6a8bb6>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_loss_history\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(scalex, scaley, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2810\u001b[0m \u001b[0;34m@\u001b[0m\u001b[0m_copy_docstring_and_deprecators\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mAxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2811\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscalex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscaley\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2812\u001b[0;31m     return gca().plot(\n\u001b[0m\u001b[1;32m   2813\u001b[0m         \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscalex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mscalex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscaley\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mscaley\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2814\u001b[0m         **({\"data\": data} if data is not None else {}), **kwargs)\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(self, scalex, scaley, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1686\u001b[0m         \"\"\"\n\u001b[1;32m   1687\u001b[0m         \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnormalize_kwargs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmlines\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLine2D\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1688\u001b[0;31m         \u001b[0mlines\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_lines\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1689\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlines\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1690\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m    309\u001b[0m                 \u001b[0mthis\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m                 \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 311\u001b[0;31m             yield from self._plot_args(\n\u001b[0m\u001b[1;32m    312\u001b[0m                 this, kwargs, ambiguous_fmt_datakey=ambiguous_fmt_datakey)\n\u001b[1;32m    313\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m_plot_args\u001b[0;34m(self, tup, kwargs, return_kwargs, ambiguous_fmt_datakey)\u001b[0m\n\u001b[1;32m    494\u001b[0m             \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_1d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxy\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    495\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 496\u001b[0;31m             \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindex_of\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxy\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    497\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    498\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxaxis\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/cbook/__init__.py\u001b[0m in \u001b[0;36mindex_of\u001b[0;34m(y)\u001b[0m\n\u001b[1;32m   1654\u001b[0m         \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1655\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1656\u001b[0;31m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_1d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1657\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mVisibleDeprecationWarning\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1658\u001b[0m         \u001b[0;31m# NumPy 1.19 will warn on ragged input, and we can't actually use it.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/cbook/__init__.py\u001b[0m in \u001b[0;36m_check_1d\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m   1346\u001b[0m             \u001b[0;32mnot\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'ndim'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1347\u001b[0m             len(x.shape) < 1):\n\u001b[0;32m-> 1348\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0matleast_1d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1349\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1350\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/numpy/core/overrides.py\u001b[0m in \u001b[0;36matleast_1d\u001b[0;34m(*args, **kwargs)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/numpy/core/shape_base.py\u001b[0m in \u001b[0;36matleast_1d\u001b[0;34m(*arys)\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mary\u001b[0m \u001b[0;32min\u001b[0m \u001b[0marys\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m         \u001b[0mary\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0masanyarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mary\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mary\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mary\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/_tensor.py\u001b[0m in \u001b[0;36m__array__\u001b[0;34m(self, dtype)\u001b[0m\n\u001b[1;32m    968\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mhandle_torch_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__array__\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    969\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdtype\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 970\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    971\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    972\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: Can't call numpy() on Tensor that requires grad. Use tensor.detach().numpy() instead."]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}