{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1UzrXJ_DHuT8f4HCK9jqEoJtxcbxomUsk","timestamp":1697551996142}],"authorship_tag":"ABX9TyM2gTOmbiri/JMnDp6aO+T2"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"abw5OpUWfARP","executionInfo":{"status":"ok","timestamp":1697552063882,"user_tz":-180,"elapsed":5142,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}}},"outputs":[],"source":["import torch\n","import random\n","import numpy as np\n","\n","random.seed(0)\n","np.random.seed(0)\n","torch.manual_seed(0)\n","torch.cuda.manual_seed(0)\n","torch.backends.cudnn.deterministic = True"]},{"cell_type":"code","source":["import torchvision.datasets\n","MNIST_train = torchvision.datasets.MNIST('./', download=True, train=True)\n","MNIST_test = torchvision.datasets.MNIST('./', download=True, train=True)\n","\n","X_train = MNIST_train.train_data\n","y_train = MNIST_train.train_labels\n","X_test= MNIST_test.test_data\n","y_test = MNIST_test.test_labels"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QuMOUr9EggPr","executionInfo":{"status":"ok","timestamp":1697552066689,"user_tz":-180,"elapsed":2818,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}},"outputId":"f70448f9-b3e4-429f-dcd4-b840c35f3cf5"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to ./MNIST/raw/train-images-idx3-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9912422/9912422 [00:00<00:00, 77748958.37it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting ./MNIST/raw/train-images-idx3-ubyte.gz to ./MNIST/raw\n","\n","Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to ./MNIST/raw/train-labels-idx1-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 28881/28881 [00:00<00:00, 73238025.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Extracting ./MNIST/raw/train-labels-idx1-ubyte.gz to ./MNIST/raw\n","\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to ./MNIST/raw/t10k-images-idx3-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["\n","100%|██████████| 1648877/1648877 [00:00<00:00, 18938515.67it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting ./MNIST/raw/t10k-images-idx3-ubyte.gz to ./MNIST/raw\n","\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to ./MNIST/raw/t10k-labels-idx1-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 4542/4542 [00:00<00:00, 13266384.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Extracting ./MNIST/raw/t10k-labels-idx1-ubyte.gz to ./MNIST/raw\n","\n"]},{"output_type":"stream","name":"stderr","text":["\n","/usr/local/lib/python3.10/dist-packages/torchvision/datasets/mnist.py:75: UserWarning: train_data has been renamed data\n","  warnings.warn(\"train_data has been renamed data\")\n","/usr/local/lib/python3.10/dist-packages/torchvision/datasets/mnist.py:65: UserWarning: train_labels has been renamed targets\n","  warnings.warn(\"train_labels has been renamed targets\")\n","/usr/local/lib/python3.10/dist-packages/torchvision/datasets/mnist.py:80: UserWarning: test_data has been renamed data\n","  warnings.warn(\"test_data has been renamed data\")\n","/usr/local/lib/python3.10/dist-packages/torchvision/datasets/mnist.py:70: UserWarning: test_labels has been renamed targets\n","  warnings.warn(\"test_labels has been renamed targets\")\n"]}]},{"cell_type":"code","source":["X_train.dtype, y_train.dtype"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7UOAamg7hYAS","executionInfo":{"status":"ok","timestamp":1697552066689,"user_tz":-180,"elapsed":13,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}},"outputId":"6d0afca1-971d-4836-9ad5-183e826f06aa"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(torch.uint8, torch.int64)"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["X_train = X_train.float()\n","X_test = X_test.float()"],"metadata":{"id":"lyX5IYzJholT","executionInfo":{"status":"ok","timestamp":1697552067600,"user_tz":-180,"elapsed":920,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["X_train.shape, X_test.shape\n","y_train.shape, y_test.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vesjRklgiA6y","executionInfo":{"status":"ok","timestamp":1697552067601,"user_tz":-180,"elapsed":12,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}},"outputId":"fc417d0c-09e6-46ac-f37b-cb16aa033f41"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(torch.Size([60000]), torch.Size([60000]))"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","plt.imshow(X_train[0, :, :])\n","plt.show()\n","print(y_train[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"_EHEIFcIiRWK","executionInfo":{"status":"ok","timestamp":1697552068212,"user_tz":-180,"elapsed":619,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}},"outputId":"72ecda78-29da-4984-df81-a2c2dbe25ad2"},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["tensor(5)\n"]}]},{"cell_type":"code","source":["X_train = X_train.reshape([-1, 28 * 28])\n","X_test = X_test.reshape([-1, 28 * 28])"],"metadata":{"id":"TEEfsnqWiotX","executionInfo":{"status":"ok","timestamp":1697552068213,"user_tz":-180,"elapsed":20,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["class MNISTNet(torch.nn.Module):\n","  def __init__(self, n_hidden_neurons):\n","    super(MNISTNet, self).__init__()\n","    self.fc1 = torch.nn.Linear(28 * 28, n_hidden_neurons)\n","    self.ac1 = torch.nn.Sigmoid()\n","    self.fc2 = torch.nn.Linear(n_hidden_neurons, 10)\n","  def forward(self, x):\n","    x = self.fc1(x)\n","    x = self.ac1(x)\n","    x = self.fc2(x)\n","    return x\n","mnist_net = MNISTNet(60)"],"metadata":{"id":"ZBvvwsIxi7Wu","executionInfo":{"status":"ok","timestamp":1697552068214,"user_tz":-180,"elapsed":20,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["loss = torch.nn.CrossEntropyLoss()\n","optimizer = torch.optim.Adam(mnist_net.parameters(), lr=1.0e-6)"],"metadata":{"id":"OfkVCb6LkVZP","executionInfo":{"status":"ok","timestamp":1697552068214,"user_tz":-180,"elapsed":20,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["batch_size = 60\n","test_accuracy_history = []\n","test_loss_history = []\n","\n","X_test = X_test.to(device)\n","y_test = y_test.to(device)\n","for epoch in range(3500):\n","  order = np.random.permutation(len(X_train))\n","\n","  for start_index in range(0, len(X_train), batch_size):\n","    optimizer.zero_grad()\n","\n","    batch_indexes = order[start_index:start_index+batch_size]\n","\n","    X_batch = X_train[batch_indexes].to(device)\n","    y_batch = y_train[batch_indexes].to(device)\n","\n","    preds = mnist_net.forward(X_batch)\n","\n","    loss_value = loss(preds, y_batch)\n","    loss_value.backward()\n","\n","    optimizer.step()\n","\n","  test_preds = mnist_net.forward(X_test)\n","  test_loss_history.append(loss(test_preds, y_test))\n","\n","  accuracy = (test_preds.argmax(dim=1) == y_test).float().mean()\n","  test_accuracy_history.append(accuracy)\n","\n","  print(accuracy)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"uvljkgb9ksC-","executionInfo":{"status":"error","timestamp":1697559034959,"user_tz":-180,"elapsed":6673992,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}},"outputId":"1e2dc860-a337-4255-a114-58e083bc2bad"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor(0.1512)\n","tensor(0.2007)\n","tensor(0.2503)\n","tensor(0.2967)\n","tensor(0.3415)\n","tensor(0.3838)\n","tensor(0.4252)\n","tensor(0.4638)\n","tensor(0.4980)\n","tensor(0.5275)\n","tensor(0.5544)\n","tensor(0.5785)\n","tensor(0.5994)\n","tensor(0.6178)\n","tensor(0.6335)\n","tensor(0.6486)\n","tensor(0.6621)\n","tensor(0.6737)\n","tensor(0.6853)\n","tensor(0.6962)\n","tensor(0.7060)\n","tensor(0.7149)\n","tensor(0.7234)\n","tensor(0.7308)\n","tensor(0.7380)\n","tensor(0.7455)\n","tensor(0.7518)\n","tensor(0.7580)\n","tensor(0.7620)\n","tensor(0.7669)\n","tensor(0.7715)\n","tensor(0.7764)\n","tensor(0.7807)\n","tensor(0.7853)\n","tensor(0.7896)\n","tensor(0.7929)\n","tensor(0.7969)\n","tensor(0.8007)\n","tensor(0.8038)\n","tensor(0.8071)\n","tensor(0.8094)\n","tensor(0.8120)\n","tensor(0.8146)\n","tensor(0.8174)\n","tensor(0.8198)\n","tensor(0.8223)\n","tensor(0.8241)\n","tensor(0.8261)\n","tensor(0.8282)\n","tensor(0.8299)\n","tensor(0.8313)\n","tensor(0.8328)\n","tensor(0.8347)\n","tensor(0.8366)\n","tensor(0.8376)\n","tensor(0.8392)\n","tensor(0.8409)\n","tensor(0.8423)\n","tensor(0.8432)\n","tensor(0.8445)\n","tensor(0.8454)\n","tensor(0.8467)\n","tensor(0.8479)\n","tensor(0.8490)\n","tensor(0.8503)\n","tensor(0.8518)\n","tensor(0.8529)\n","tensor(0.8537)\n","tensor(0.8546)\n","tensor(0.8560)\n","tensor(0.8570)\n","tensor(0.8575)\n","tensor(0.8583)\n","tensor(0.8594)\n","tensor(0.8605)\n","tensor(0.8615)\n","tensor(0.8626)\n","tensor(0.8633)\n","tensor(0.8641)\n","tensor(0.8651)\n","tensor(0.8659)\n","tensor(0.8666)\n","tensor(0.8675)\n","tensor(0.8685)\n","tensor(0.8693)\n","tensor(0.8699)\n","tensor(0.8709)\n","tensor(0.8713)\n","tensor(0.8721)\n","tensor(0.8731)\n","tensor(0.8739)\n","tensor(0.8745)\n","tensor(0.8752)\n","tensor(0.8755)\n","tensor(0.8760)\n","tensor(0.8767)\n","tensor(0.8772)\n","tensor(0.8777)\n","tensor(0.8785)\n","tensor(0.8789)\n","tensor(0.8794)\n","tensor(0.8801)\n","tensor(0.8807)\n","tensor(0.8811)\n","tensor(0.8816)\n","tensor(0.8823)\n","tensor(0.8828)\n","tensor(0.8833)\n","tensor(0.8836)\n","tensor(0.8840)\n","tensor(0.8843)\n","tensor(0.8849)\n","tensor(0.8852)\n","tensor(0.8856)\n","tensor(0.8861)\n","tensor(0.8863)\n","tensor(0.8868)\n","tensor(0.8873)\n","tensor(0.8876)\n","tensor(0.8881)\n","tensor(0.8884)\n","tensor(0.8887)\n","tensor(0.8891)\n","tensor(0.8896)\n","tensor(0.8901)\n","tensor(0.8906)\n","tensor(0.8909)\n","tensor(0.8913)\n","tensor(0.8914)\n","tensor(0.8920)\n","tensor(0.8924)\n","tensor(0.8927)\n","tensor(0.8931)\n","tensor(0.8933)\n","tensor(0.8938)\n","tensor(0.8941)\n","tensor(0.8942)\n","tensor(0.8945)\n","tensor(0.8949)\n","tensor(0.8950)\n","tensor(0.8952)\n","tensor(0.8955)\n","tensor(0.8960)\n","tensor(0.8962)\n","tensor(0.8963)\n","tensor(0.8967)\n","tensor(0.8969)\n","tensor(0.8972)\n","tensor(0.8975)\n","tensor(0.8977)\n","tensor(0.8978)\n","tensor(0.8981)\n","tensor(0.8984)\n","tensor(0.8987)\n","tensor(0.8990)\n","tensor(0.8991)\n","tensor(0.8993)\n","tensor(0.8996)\n","tensor(0.8998)\n","tensor(0.9002)\n","tensor(0.9004)\n","tensor(0.9005)\n","tensor(0.9008)\n","tensor(0.9009)\n","tensor(0.9011)\n","tensor(0.9012)\n","tensor(0.9014)\n","tensor(0.9015)\n","tensor(0.9015)\n","tensor(0.9019)\n","tensor(0.9020)\n","tensor(0.9021)\n","tensor(0.9025)\n","tensor(0.9027)\n","tensor(0.9028)\n","tensor(0.9030)\n","tensor(0.9032)\n","tensor(0.9034)\n","tensor(0.9035)\n","tensor(0.9036)\n","tensor(0.9039)\n","tensor(0.9041)\n","tensor(0.9042)\n","tensor(0.9046)\n","tensor(0.9048)\n","tensor(0.9050)\n","tensor(0.9050)\n","tensor(0.9054)\n","tensor(0.9054)\n","tensor(0.9057)\n","tensor(0.9057)\n","tensor(0.9060)\n","tensor(0.9063)\n","tensor(0.9064)\n","tensor(0.9066)\n","tensor(0.9067)\n","tensor(0.9069)\n","tensor(0.9069)\n","tensor(0.9072)\n","tensor(0.9074)\n","tensor(0.9076)\n","tensor(0.9078)\n","tensor(0.9078)\n","tensor(0.9080)\n","tensor(0.9082)\n","tensor(0.9084)\n","tensor(0.9086)\n","tensor(0.9086)\n","tensor(0.9088)\n","tensor(0.9089)\n","tensor(0.9089)\n","tensor(0.9091)\n","tensor(0.9093)\n","tensor(0.9095)\n","tensor(0.9095)\n","tensor(0.9098)\n","tensor(0.9099)\n","tensor(0.9100)\n","tensor(0.9100)\n","tensor(0.9101)\n","tensor(0.9103)\n","tensor(0.9104)\n","tensor(0.9105)\n","tensor(0.9106)\n","tensor(0.9107)\n","tensor(0.9109)\n","tensor(0.9109)\n","tensor(0.9110)\n","tensor(0.9111)\n","tensor(0.9114)\n","tensor(0.9115)\n","tensor(0.9116)\n","tensor(0.9115)\n","tensor(0.9118)\n","tensor(0.9119)\n","tensor(0.9121)\n","tensor(0.9122)\n","tensor(0.9124)\n","tensor(0.9125)\n","tensor(0.9127)\n","tensor(0.9128)\n","tensor(0.9129)\n","tensor(0.9130)\n","tensor(0.9132)\n","tensor(0.9134)\n","tensor(0.9133)\n","tensor(0.9135)\n","tensor(0.9136)\n","tensor(0.9138)\n","tensor(0.9140)\n","tensor(0.9139)\n","tensor(0.9143)\n","tensor(0.9142)\n","tensor(0.9144)\n","tensor(0.9146)\n","tensor(0.9146)\n","tensor(0.9148)\n","tensor(0.9150)\n","tensor(0.9151)\n","tensor(0.9152)\n","tensor(0.9153)\n","tensor(0.9154)\n","tensor(0.9156)\n","tensor(0.9157)\n","tensor(0.9158)\n","tensor(0.9160)\n","tensor(0.9160)\n","tensor(0.9162)\n","tensor(0.9163)\n","tensor(0.9163)\n","tensor(0.9165)\n","tensor(0.9164)\n","tensor(0.9166)\n","tensor(0.9168)\n","tensor(0.9168)\n","tensor(0.9169)\n","tensor(0.9171)\n","tensor(0.9172)\n","tensor(0.9172)\n","tensor(0.9172)\n","tensor(0.9174)\n","tensor(0.9177)\n","tensor(0.9177)\n","tensor(0.9179)\n","tensor(0.9178)\n","tensor(0.9180)\n","tensor(0.9180)\n","tensor(0.9182)\n","tensor(0.9182)\n","tensor(0.9185)\n","tensor(0.9186)\n","tensor(0.9186)\n","tensor(0.9189)\n","tensor(0.9190)\n","tensor(0.9192)\n","tensor(0.9191)\n","tensor(0.9193)\n","tensor(0.9195)\n","tensor(0.9197)\n","tensor(0.9197)\n","tensor(0.9199)\n","tensor(0.9200)\n","tensor(0.9201)\n","tensor(0.9201)\n","tensor(0.9202)\n","tensor(0.9203)\n","tensor(0.9205)\n","tensor(0.9205)\n","tensor(0.9207)\n","tensor(0.9207)\n","tensor(0.9207)\n","tensor(0.9209)\n","tensor(0.9211)\n","tensor(0.9210)\n","tensor(0.9211)\n","tensor(0.9214)\n","tensor(0.9214)\n","tensor(0.9215)\n","tensor(0.9216)\n","tensor(0.9218)\n","tensor(0.9219)\n","tensor(0.9218)\n","tensor(0.9219)\n","tensor(0.9221)\n","tensor(0.9221)\n","tensor(0.9223)\n","tensor(0.9223)\n","tensor(0.9224)\n","tensor(0.9225)\n","tensor(0.9226)\n","tensor(0.9227)\n","tensor(0.9227)\n","tensor(0.9229)\n","tensor(0.9229)\n","tensor(0.9229)\n","tensor(0.9230)\n","tensor(0.9232)\n","tensor(0.9232)\n","tensor(0.9232)\n","tensor(0.9234)\n","tensor(0.9233)\n","tensor(0.9234)\n","tensor(0.9235)\n","tensor(0.9234)\n","tensor(0.9237)\n","tensor(0.9238)\n","tensor(0.9239)\n","tensor(0.9238)\n","tensor(0.9241)\n","tensor(0.9241)\n","tensor(0.9242)\n","tensor(0.9243)\n","tensor(0.9242)\n","tensor(0.9244)\n","tensor(0.9245)\n","tensor(0.9245)\n","tensor(0.9246)\n","tensor(0.9247)\n","tensor(0.9247)\n","tensor(0.9248)\n","tensor(0.9249)\n","tensor(0.9249)\n","tensor(0.9250)\n","tensor(0.9251)\n","tensor(0.9252)\n","tensor(0.9253)\n","tensor(0.9254)\n","tensor(0.9255)\n","tensor(0.9255)\n","tensor(0.9257)\n","tensor(0.9258)\n","tensor(0.9259)\n","tensor(0.9259)\n","tensor(0.9260)\n","tensor(0.9262)\n","tensor(0.9262)\n","tensor(0.9263)\n","tensor(0.9264)\n","tensor(0.9264)\n","tensor(0.9267)\n","tensor(0.9266)\n","tensor(0.9267)\n","tensor(0.9266)\n","tensor(0.9267)\n","tensor(0.9269)\n","tensor(0.9269)\n","tensor(0.9270)\n","tensor(0.9271)\n","tensor(0.9272)\n","tensor(0.9273)\n","tensor(0.9272)\n","tensor(0.9273)\n","tensor(0.9274)\n","tensor(0.9274)\n","tensor(0.9275)\n","tensor(0.9277)\n","tensor(0.9277)\n","tensor(0.9280)\n","tensor(0.9278)\n","tensor(0.9279)\n","tensor(0.9281)\n","tensor(0.9282)\n","tensor(0.9282)\n","tensor(0.9283)\n","tensor(0.9284)\n","tensor(0.9284)\n","tensor(0.9285)\n","tensor(0.9287)\n","tensor(0.9286)\n","tensor(0.9288)\n","tensor(0.9288)\n","tensor(0.9289)\n","tensor(0.9289)\n","tensor(0.9292)\n","tensor(0.9291)\n","tensor(0.9291)\n","tensor(0.9293)\n","tensor(0.9293)\n","tensor(0.9294)\n","tensor(0.9293)\n","tensor(0.9294)\n","tensor(0.9295)\n","tensor(0.9294)\n","tensor(0.9297)\n","tensor(0.9297)\n","tensor(0.9296)\n","tensor(0.9297)\n","tensor(0.9298)\n","tensor(0.9298)\n","tensor(0.9299)\n","tensor(0.9302)\n","tensor(0.9300)\n","tensor(0.9301)\n","tensor(0.9302)\n","tensor(0.9304)\n","tensor(0.9304)\n","tensor(0.9304)\n","tensor(0.9305)\n","tensor(0.9305)\n","tensor(0.9306)\n","tensor(0.9307)\n","tensor(0.9307)\n","tensor(0.9308)\n","tensor(0.9308)\n","tensor(0.9307)\n","tensor(0.9309)\n","tensor(0.9308)\n","tensor(0.9310)\n","tensor(0.9311)\n","tensor(0.9310)\n","tensor(0.9310)\n","tensor(0.9311)\n","tensor(0.9312)\n","tensor(0.9313)\n","tensor(0.9314)\n","tensor(0.9315)\n","tensor(0.9315)\n","tensor(0.9315)\n","tensor(0.9316)\n","tensor(0.9316)\n","tensor(0.9317)\n","tensor(0.9317)\n","tensor(0.9317)\n","tensor(0.9319)\n","tensor(0.9318)\n","tensor(0.9319)\n","tensor(0.9320)\n","tensor(0.9321)\n","tensor(0.9322)\n","tensor(0.9321)\n","tensor(0.9322)\n","tensor(0.9322)\n","tensor(0.9323)\n","tensor(0.9324)\n","tensor(0.9325)\n","tensor(0.9324)\n","tensor(0.9326)\n","tensor(0.9326)\n","tensor(0.9326)\n","tensor(0.9326)\n","tensor(0.9325)\n","tensor(0.9326)\n","tensor(0.9328)\n","tensor(0.9326)\n","tensor(0.9328)\n","tensor(0.9329)\n","tensor(0.9329)\n","tensor(0.9331)\n","tensor(0.9331)\n","tensor(0.9331)\n","tensor(0.9331)\n","tensor(0.9332)\n","tensor(0.9333)\n","tensor(0.9332)\n","tensor(0.9332)\n","tensor(0.9333)\n","tensor(0.9333)\n","tensor(0.9334)\n","tensor(0.9334)\n","tensor(0.9336)\n","tensor(0.9337)\n","tensor(0.9337)\n","tensor(0.9337)\n","tensor(0.9338)\n","tensor(0.9340)\n","tensor(0.9339)\n","tensor(0.9340)\n","tensor(0.9340)\n","tensor(0.9341)\n","tensor(0.9341)\n","tensor(0.9341)\n","tensor(0.9343)\n","tensor(0.9343)\n","tensor(0.9343)\n","tensor(0.9344)\n","tensor(0.9345)\n","tensor(0.9344)\n","tensor(0.9344)\n","tensor(0.9347)\n","tensor(0.9346)\n","tensor(0.9347)\n","tensor(0.9348)\n","tensor(0.9349)\n","tensor(0.9348)\n","tensor(0.9349)\n","tensor(0.9349)\n","tensor(0.9351)\n","tensor(0.9351)\n","tensor(0.9352)\n","tensor(0.9352)\n","tensor(0.9352)\n","tensor(0.9353)\n","tensor(0.9353)\n","tensor(0.9352)\n","tensor(0.9353)\n","tensor(0.9354)\n","tensor(0.9354)\n","tensor(0.9355)\n","tensor(0.9355)\n","tensor(0.9356)\n","tensor(0.9356)\n","tensor(0.9355)\n","tensor(0.9357)\n","tensor(0.9358)\n","tensor(0.9358)\n","tensor(0.9358)\n","tensor(0.9359)\n","tensor(0.9359)\n","tensor(0.9360)\n","tensor(0.9359)\n","tensor(0.9359)\n","tensor(0.9361)\n","tensor(0.9359)\n","tensor(0.9361)\n","tensor(0.9362)\n","tensor(0.9362)\n","tensor(0.9362)\n","tensor(0.9363)\n","tensor(0.9363)\n","tensor(0.9364)\n","tensor(0.9365)\n","tensor(0.9365)\n","tensor(0.9366)\n","tensor(0.9366)\n","tensor(0.9366)\n","tensor(0.9367)\n","tensor(0.9366)\n","tensor(0.9368)\n","tensor(0.9368)\n","tensor(0.9369)\n","tensor(0.9368)\n","tensor(0.9369)\n","tensor(0.9370)\n","tensor(0.9369)\n","tensor(0.9369)\n","tensor(0.9371)\n","tensor(0.9371)\n","tensor(0.9370)\n","tensor(0.9370)\n","tensor(0.9371)\n","tensor(0.9373)\n","tensor(0.9372)\n","tensor(0.9373)\n","tensor(0.9373)\n","tensor(0.9373)\n","tensor(0.9374)\n","tensor(0.9373)\n","tensor(0.9373)\n","tensor(0.9374)\n","tensor(0.9376)\n","tensor(0.9375)\n","tensor(0.9375)\n","tensor(0.9376)\n","tensor(0.9376)\n","tensor(0.9377)\n","tensor(0.9378)\n","tensor(0.9378)\n","tensor(0.9379)\n","tensor(0.9380)\n","tensor(0.9379)\n","tensor(0.9380)\n","tensor(0.9380)\n","tensor(0.9381)\n","tensor(0.9381)\n","tensor(0.9381)\n","tensor(0.9383)\n","tensor(0.9382)\n","tensor(0.9384)\n","tensor(0.9384)\n","tensor(0.9384)\n","tensor(0.9384)\n","tensor(0.9384)\n","tensor(0.9386)\n","tensor(0.9386)\n","tensor(0.9387)\n","tensor(0.9388)\n","tensor(0.9388)\n","tensor(0.9388)\n","tensor(0.9388)\n","tensor(0.9388)\n","tensor(0.9389)\n","tensor(0.9389)\n","tensor(0.9389)\n","tensor(0.9389)\n","tensor(0.9390)\n","tensor(0.9390)\n","tensor(0.9390)\n","tensor(0.9390)\n","tensor(0.9390)\n","tensor(0.9391)\n","tensor(0.9392)\n","tensor(0.9390)\n","tensor(0.9391)\n","tensor(0.9391)\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-2a183ce8711e>\u001b[0m in \u001b[0;36m<cell line: 7>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     21\u001b[0m     \u001b[0mloss_value\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 23\u001b[0;31m     \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m   \u001b[0mtest_preds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmnist_net\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    278\u001b[0m                                                f\"but got {result}.\")\n\u001b[1;32m    279\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 280\u001b[0;31m                 \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    281\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_optimizer_step_code\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    282\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py\u001b[0m in \u001b[0;36m_use_grad\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m     31\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m             \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_grad_enabled\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdefaults\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'differentiable'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 33\u001b[0;31m             \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     34\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m             \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_grad_enabled\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprev_grad\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py\u001b[0m in \u001b[0;36mstep\u001b[0;34m(self, closure)\u001b[0m\n\u001b[1;32m    139\u001b[0m                 state_steps)\n\u001b[1;32m    140\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 141\u001b[0;31m             adam(\n\u001b[0m\u001b[1;32m    142\u001b[0m                 \u001b[0mparams_with_grad\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    143\u001b[0m                 \u001b[0mgrads\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py\u001b[0m in \u001b[0;36madam\u001b[0;34m(params, grads, exp_avgs, exp_avg_sqs, max_exp_avg_sqs, state_steps, foreach, capturable, differentiable, fused, grad_scale, found_inf, amsgrad, beta1, beta2, lr, weight_decay, eps, maximize)\u001b[0m\n\u001b[1;32m    279\u001b[0m         \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_single_tensor_adam\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    280\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 281\u001b[0;31m     func(params,\n\u001b[0m\u001b[1;32m    282\u001b[0m          \u001b[0mgrads\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    283\u001b[0m          \u001b[0mexp_avgs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py\u001b[0m in \u001b[0;36m_single_tensor_adam\u001b[0;34m(params, grads, exp_avgs, exp_avg_sqs, max_exp_avg_sqs, state_steps, grad_scale, found_inf, amsgrad, beta1, beta2, lr, weight_decay, eps, maximize, capturable, differentiable)\u001b[0m\n\u001b[1;32m    343\u001b[0m         \u001b[0;31m# Decay the first and second moment running average coefficient\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    344\u001b[0m         \u001b[0mexp_avg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmul_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbeta1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrad\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mbeta1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 345\u001b[0;31m         \u001b[0mexp_avg_sq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmul_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbeta2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maddcmul_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrad\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrad\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconj\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mbeta2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    346\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    347\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcapturable\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mdifferentiable\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["torch.cuda.is_available()\n","!nvidia-smi\n","device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n","mnist_net = mnist_net.to(device)\n","list(mnist_net.parametres())"],"metadata":{"id":"rwwr6rdF-IFI","colab":{"base_uri":"https://localhost:8080/","height":349},"executionInfo":{"status":"error","timestamp":1697559049326,"user_tz":-180,"elapsed":403,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}},"outputId":"14042122-fd0d-47b6-b7ef-316219c0c500"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["/bin/bash: line 1: nvidia-smi: command not found\n"]},{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-a1bfea4c2a26>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mdevice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'cuda:0'\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcuda\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_available\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m'cpu'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mmnist_net\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmnist_net\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmnist_net\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparametres\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   1612\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmodules\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1613\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mmodules\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1614\u001b[0;31m         raise AttributeError(\"'{}' object has no attribute '{}'\".format(\n\u001b[0m\u001b[1;32m   1615\u001b[0m             type(self).__name__, name))\n\u001b[1;32m   1616\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'MNISTNet' object has no attribute 'parametres'"]}]},{"cell_type":"code","source":["plt.plot(test_accuracy_history)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"5siEc3xLoUK0","executionInfo":{"status":"ok","timestamp":1697559053492,"user_tz":-180,"elapsed":585,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}},"outputId":"d84f2df2-b4b8-4447-e2bf-1ef910e137c4"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7b1794859510>]"]},"metadata":{},"execution_count":16},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.plot(test_loss_history)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":739},"id":"i_4LsAL8okHV","executionInfo":{"status":"error","timestamp":1697559057096,"user_tz":-180,"elapsed":581,"user":{"displayName":"Вадим Вдовкин","userId":"17911762525351022023"}},"outputId":"e3ddf485-d6a6-426c-e3a5-f497228880ec"},"execution_count":17,"outputs":[{"output_type":"error","ename":"RuntimeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-17-cfcccf6a8bb6>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_loss_history\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(scalex, scaley, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2810\u001b[0m \u001b[0;34m@\u001b[0m\u001b[0m_copy_docstring_and_deprecators\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mAxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2811\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscalex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscaley\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2812\u001b[0;31m     return gca().plot(\n\u001b[0m\u001b[1;32m   2813\u001b[0m         \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscalex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mscalex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscaley\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mscaley\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2814\u001b[0m         **({\"data\": data} if data is not None else {}), **kwargs)\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(self, scalex, scaley, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1686\u001b[0m         \"\"\"\n\u001b[1;32m   1687\u001b[0m         \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnormalize_kwargs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmlines\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLine2D\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1688\u001b[0;31m         \u001b[0mlines\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_lines\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1689\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlines\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1690\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m    309\u001b[0m                 \u001b[0mthis\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m                 \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 311\u001b[0;31m             yield from self._plot_args(\n\u001b[0m\u001b[1;32m    312\u001b[0m                 this, kwargs, ambiguous_fmt_datakey=ambiguous_fmt_datakey)\n\u001b[1;32m    313\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m_plot_args\u001b[0;34m(self, tup, kwargs, return_kwargs, ambiguous_fmt_datakey)\u001b[0m\n\u001b[1;32m    494\u001b[0m             \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_1d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxy\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    495\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 496\u001b[0;31m             \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindex_of\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxy\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    497\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    498\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxaxis\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/cbook/__init__.py\u001b[0m in \u001b[0;36mindex_of\u001b[0;34m(y)\u001b[0m\n\u001b[1;32m   1654\u001b[0m         \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1655\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1656\u001b[0;31m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_1d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1657\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mVisibleDeprecationWarning\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1658\u001b[0m         \u001b[0;31m# NumPy 1.19 will warn on ragged input, and we can't actually use it.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/cbook/__init__.py\u001b[0m in \u001b[0;36m_check_1d\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m   1346\u001b[0m             \u001b[0;32mnot\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'ndim'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1347\u001b[0m             len(x.shape) < 1):\n\u001b[0;32m-> 1348\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0matleast_1d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1349\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1350\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/numpy/core/overrides.py\u001b[0m in \u001b[0;36matleast_1d\u001b[0;34m(*args, **kwargs)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/numpy/core/shape_base.py\u001b[0m in \u001b[0;36matleast_1d\u001b[0;34m(*arys)\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mary\u001b[0m \u001b[0;32min\u001b[0m \u001b[0marys\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m         \u001b[0mary\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0masanyarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mary\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mary\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mary\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/_tensor.py\u001b[0m in \u001b[0;36m__array__\u001b[0;34m(self, dtype)\u001b[0m\n\u001b[1;32m    968\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mhandle_torch_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__array__\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    969\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdtype\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 970\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    971\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    972\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: Can't call numpy() on Tensor that requires grad. Use tensor.detach().numpy() instead."]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}